"""
elevata - Metadata-driven Data Platform Framework
Copyright © 2025 Ilona Tag

This file is part of elevata.

elevata is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

elevata is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with elevata. If not, see <https://www.gnu.org/licenses/>.

Contact: <https://github.com/elevata-labs/elevata>.
"""

"""
Django settings for elevata_site project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv, find_dotenv 
import dj_database_url
from utils.env import env_bool, env_list, env_str, env_int
from utils.db import build_metadata_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(find_dotenv(filename=".env", raise_error_if_not_found=False))

ELEVATA_VERSION = "0.2.5"

ELEVATA_PROFILES_PATH = os.getenv("ELEVATA_PROFILES_PATH", str((BASE_DIR.parent / "config" / "elevata_profiles.yaml")))

STATIC_URL = "static/"

STATICFILES_DIRS = [
  BASE_DIR / "static", 
  BASE_DIR.parent / "docs",
]

DOCS_BACKENDS_URL = "https://github.com/elevata-labs/elevata/blob/main/docs/source_backends.md"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "dev-only-unsafe")

ALLOWED_HOSTS = env_list("ALLOWED_HOSTS", [])

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DEBUG", False)
SECRET_KEY = env_str("SECRET_KEY", "dev-only-insecure")

# Application definition

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',
  'metadata',
]

MIDDLEWARE = [
  # Ensure CommonMiddleware is enabled
  "django.middleware.security.SecurityMiddleware",
  "django.contrib.sessions.middleware.SessionMiddleware",
  "django.middleware.common.CommonMiddleware",
  "django.middleware.csrf.CsrfViewMiddleware",
  "django.contrib.auth.middleware.AuthenticationMiddleware",
  "django.contrib.messages.middleware.MessageMiddleware",
  "django.middleware.clickjacking.XFrameOptionsMiddleware",
  "elevata_site.middleware.LoginRequiredAllMiddleware",
]

APPEND_SLASH = True

ROOT_URLCONF = 'elevata_site.urls'

TEMPLATES = [
  {
    "BACKEND": "django.template.backends.django.DjangoTemplates",
    "DIRS": [BASE_DIR / "templates"],
    "APP_DIRS": True,
    "OPTIONS": {
      "context_processors": [
        "django.template.context_processors.debug",
        "django.template.context_processors.request",
        "django.contrib.auth.context_processors.auth",
        "django.contrib.messages.context_processors.messages",
        "elevata_site.context_processors.app_menu",
        "elevata_site.context_processors.type_support",
        "elevata_site.context_processors.crud_ui_config",
        "elevata_site.context_processors.elevata_version",
      ],
    },
  },
]


WSGI_APPLICATION = 'elevata_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL = build_metadata_database_url(BASE_DIR)

DATABASES = {
  "default": dj_database_url.parse(
    DATABASE_URL,
    conn_max_age=env_int("DB_CONN_MAX_AGE", 60),
    ssl_require=env_bool("DB_SSL_REQUIRE", False),
  )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
  },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ELEVATA_CRUD = {
  "metadata": {
    "order": [
      "Team", 
      "Person", 
      "PartialLoad", 
      "SourceSystem", 
      "SourceDataset", 
      "SourceColumn",
      "TargetSchema", 
      "TargetDataset", 
      "TargetColumn", 
      "SourceDatasetGroup",
      "TargetDatasetReference"
      ],
    "descriptions": {
      "Team": "Organize data teams and functional groups.",
      "Person": "Track users and their association with data teams across the organization.",
      "PartialLoad": "Define additional loads to process subsets of datasets at individual frequencies.",
      "SourceSystem": "Register and describe upstream systems that provide raw data to the platform.",
      "SourceDataset": "Define datasets extracted from source systems — the entry point for ingestion.",
      "SourceColumn": "Capture technical metadata and profiling details for each source column.",
      "TargetSchema": "Model your platform’s architectural layers and their default behaviors.",
      "TargetDataset": "Design target datasets and map them to their corresponding source inputs.",
      "TargetColumn": "Define business-ready columns and manage data quality at the attribute level.",
      "SourceDatasetGroup": "Group structurally similar source datasets to enable unified target generation.",
      "TargetDatasetReference": "Define relationships between target datasets to generate consistent foreign surrogate keys."
    },
    "icons": {
      "Team": "users",
      "Person": "user",
      "PartialLoad": "timer",
      "SourceSystem": "database",
      "SourceDataset": "file",
      "SourceColumn": "grid-2x2",
      "TargetSchema": "layers",
      "TargetDataset": "file-check-2",
      "TargetColumn": "grid-2x2-check",
      "SourceDatasetGroup": "merge",
      "TargetDatasetReference": "arrow-left-right",
    },
    "exclude": [
      "SourceDatasetOwnership", 
      "TargetDatasetOwnership", 
      "SourceDatasetIncrementPolicy",
      "SourceDatasetGroupMembership",
      "TargetDatasetInput",
      "IncrementFieldMap",
      "TargetColumnInput",
      "TargetDatasetReferenceComponent",
    ],
    "paths": {      
    },
    "system_managed": {
      "TargetSchema": [
        "short_name",
        "display_name",
        "description",
        "is_user_visible",
      ],
    },
    "no_create": [
      "TargetSchema"
    ],
    "list_toggle_fields": {
      "SourceDataset": [
        {
          "field": "integrate",
          "label_on": "Integrate",
          "label_off": "Integrate",
          "title": "Mark dataset for integration"
        },
      ],
      "SourceColumn": [
        {
          "field": "integrate",
          "label_on": "Integrate",
          "label_off": "Integrate",
          "title": "Mark column for integration"
        },
      ],
    },
    "badges": {
      "SourceColumn": [
        {
          "field": "primary_key_column", 
          "class_map": {
            "True": "badge badge-pk",
            "False": "",
            "default": "",
          },
          "label_map": {
            "True": "PK",
            "False": "",
            "default": "",
          },
        },
        {
          "field": "pii_level",
          "class_map": {
            "special_category_data": "badge badge-pii-high",
            "personal_data": "badge badge-pii-medium",
            "none": "badge badge-pii-none",
            "default": "badge badge-pii-none",
          },
          "label_map": {
            "special_category_data": "Special",
            "personal_data": "Personal",
            "none": "",
            "default": "",
          },
        },
      ],
      "TargetColumn": [
        {
          "field": "primary_key_column", 
          "class_map": {
            "True": "badge badge-pk",
            "False": "",
            "default": "",
          },
          "label_map": {
            "True": "PK",
            "False": "",
            "default": "",
          },
        },
        {
          "field": "pii_level",
          "class_map": {
            "special_category_data": "badge badge-pii-high",
            "personal_data": "badge badge-pii-medium",
            "none": "badge badge-pii-none",
            "default": "badge badge-pii-none",
          },
          "label_map": {
            "special_category_data": "Special",
            "personal_data": "Personal",
            "none": "",
            "default": "",
          },
        },
      ],
    },
  }
}

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/accounts/login/"
PASSWORD_CHANGE_REDIRECT_URL = "/"
